// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"os"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /languages)
	ListLanguages(w http.ResponseWriter, r *http.Request)

	// (GET /languages/{iso})
	GetLanguage(w http.ResponseWriter, r *http.Request, iso string)

	// (GET /languages/{iso}/count)
	GetLanguageDataCount(w http.ResponseWriter, r *http.Request, iso string)

	// (GET /latest)
	GetLatestUpdateTime(w http.ResponseWriter, r *http.Request)

	// (Get /data-contracts)
	GetDataContracts(w http.ResponseWriter, r *http.Request)

	// (Get /data-contracts/{iso})
	GetDataContract(w http.ResponseWriter, r *http.Request, iso string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /languages)
func (_ Unimplemented) ListLanguages(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /languages/{iso})
func (_ Unimplemented) GetLanguage(w http.ResponseWriter, r *http.Request, iso string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /languages/{iso}/count)
func (_ Unimplemented) GetLanguageDataCount(w http.ResponseWriter, r *http.Request, iso string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /latest)
func (_ Unimplemented) GetLatestUpdateTime(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (Get /data-contracts)
func (_ Unimplemented) GetDataContracts(w http.ResponseWriter, r *http.Request) {
	files, err := os.ReadDir("data_contracts")
	if err != nil {
		http.Error(w, "Unable to read data contracts", http.StatusInternalServerError)
		return
	}

	var contracts []string
	for _, file := range files {
		if !file.IsDir() && strings.HasSuffix(file.Name(), ".json") {
			contracts = append(contracts, file.Name())
		}
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(contracts)
}

// (Get /data-contracts/{lang})
func (_ Unimplemented) GetDataContract(w http.ResponseWriter, r *http.Request, iso string) {
	filePath := path.Join("data_contracts", iso+".json")

	data, err := os.ReadFile(filePath)
	if err != nil {
		if os.IsNotExist(err) {
			http.Error(w, "Data contract not found", http.StatusNotFound)
		} else {
			http.Error(w, "unable to read data contract", http.StatusInternalServerError)
		}
		return
		}

		w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s.json", iso))
		w.Header().Set("Content-Type", "application/json")
		w.Header().Set("Content-Length", fmt.Sprintf("%d", len(data)))
		w.Write(data)
	}


// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListLanguages operation middleware
func (siw *ServerInterfaceWrapper) ListLanguages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLanguages(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLanguage operation middleware
func (siw *ServerInterfaceWrapper) GetLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "iso" -------------
	var iso string

	err = runtime.BindStyledParameterWithOptions("simple", "iso", chi.URLParam(r, "iso"), &iso, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "iso", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLanguage(w, r, iso)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLanguageDataCount operation middleware
func (siw *ServerInterfaceWrapper) GetLanguageDataCount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "iso" -------------
	var iso string

	err = runtime.BindStyledParameterWithOptions("simple", "iso", chi.URLParam(r, "iso"), &iso, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "iso", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLanguageDataCount(w, r, iso)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLatestUpdateTime operation middleware
func (siw *ServerInterfaceWrapper) GetLatestUpdateTime(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLatestUpdateTime(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

func (siw *ServerInterfaceWrapper) GetDataContracts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataContracts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) -1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

func (siw *ServerInterfaceWrapper) GetDataContract(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	var iso string

	err = runtime.BindStyledParameterWithOptions("simple", "iso", chi.URLParam(r, "iso"),
&iso, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err!= nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "iso", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataContract(w, r, iso)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/languages", wrapper.ListLanguages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/languages/{iso}", wrapper.GetLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/languages/{iso}/count", wrapper.GetLanguageDataCount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/latest", wrapper.GetLatestUpdateTime)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/data-contracts", wrapper.GetDataContracts)
	})
	r.Group(func(r chi.Router) {
        r.Get(options.BaseURL+"/data-contracts/{iso}", wrapper.GetDataContract)
    })


	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/TMBD+V6yDx5AUNiaRN35MaGKCiQ1eEA9ucm1vJLY5X1ZNVf53ZKdNu7bbWqGh",
	"IXiqa/t8333fd7FnUNjaWYNGPOQz8MUEax2Hx8yWw8CxdchCGKdr9F6PMQzl2iHk4IXJjKFtk8WMHV5i",
	"IdAmcKrNuJlvv3kOebvljASMrnHrwpR+UKlFn5R75n6nRb+1jZFNEGJFV8e1vaQPeD21XMbZkeVaC+RA",
	"Ro4OoT+ajOAYOZwdAz/axuwVcMborCchu1/cV+ThzgGsja90n4ME6zh4yjiCHJ5kS8WzudzZxUpQR9WS",
	"UM2sr29jWNDLF1dqwQuqt6jc3FjbQbRNJDs7J1J1sVb+vYxtgghTZEZdEpIqrJ0XTEN8do58haxen51A",
	"AlfInqyBHAbpIB0ECNah0Y4gh4P0eTqABJyWSQSSVXM7xn9jjIWFsiLWYGo4JS+n/a4EGL2zxncRLwaD",
	"8FNYI9ixop2rqIjh2aUPQBb9u7PufXtuyt0mUKIvmJx0RX5Gadh4JRNUFXlRdqT6mtSUZKL0laZKDytU",
	"HV8q9GsaDn+5J/q7QHcfpi0IT4wgG10p38mEYaOyRdEwY5mGkDZZESKbkbftrXK8x16NKCTrGgXZQ/5t",
	"tp75/JM6OnilCluiGlnuSJoHpxD8BHn0Aiy+cNHGQeOfDTGWkAs3mKxQsN4s33/TELv5YJPVxZqaaq9G",
	"tjFlVPTwTyj6RpdqSbxy2ntcpD98+PQ3SjdWVsp/xIbOisV38z5bL2/Gf8Tfy4L/G/2vNHp4b9zt7LUX",
	"yYOaai3XPZdm2CdUY7g4u/4J8atXpeqeS4+L97b9FQAA//+Aw/1OJQwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
